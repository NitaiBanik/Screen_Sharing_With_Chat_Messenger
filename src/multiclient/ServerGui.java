/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package multiclient;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author Sadia
 */
public class ServerGui extends javax.swing.JFrame{

   // private ServerSocket server;
    private Socket connection;
    public boolean running;
    
   // private ObjectOutputStream output;
    //private ObjectInputStream input;
    private DataOutputStream output;
    private DataInputStream input;
    
    /**
     * Creates new form ServerMessenger
     */
    public ServerGui(Socket c,DataOutputStream dos) {
        running = true;
        connection = c;
        output = dos;
        initComponents();
        setVisible(true);
        startRunning();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        ServerMessengerPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        chatWindow = new javax.swing.JTextArea();
        usertext = new javax.swing.JTextField();
        endServer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        chatWindow.setColumns(20);
        chatWindow.setRows(5);
        jScrollPane1.setViewportView(chatWindow);

        usertext.setText("Type Something");

        endServer.setText("END");
        endServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endServerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ServerMessengerPanelLayout = new javax.swing.GroupLayout(ServerMessengerPanel);
        ServerMessengerPanel.setLayout(ServerMessengerPanelLayout);
        ServerMessengerPanelLayout.setHorizontalGroup(
            ServerMessengerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(ServerMessengerPanelLayout.createSequentialGroup()
                .addComponent(usertext, javax.swing.GroupLayout.PREFERRED_SIZE, 623, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(endServer, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 32, Short.MAX_VALUE))
        );
        ServerMessengerPanelLayout.setVerticalGroup(
            ServerMessengerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ServerMessengerPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(ServerMessengerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usertext, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(endServer, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ServerMessengerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ServerMessengerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        
        usertext.addActionListener(
    new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
           
            sendMessage(e.getActionCommand());
            usertext.setText("");
            throw new  UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }
    }
    );
    }// </editor-fold>                        

    private void endServerActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        closeConnection();
    }                                         
       public void startRunning()
    {
        try{
            //server = new ServerSocket(6066,100);
            while(running){
                try{
                    //waitForConnection();
                    setupStreams();
                    whileChatting();

                }catch (Exception e) {
                        running = false;
                    showMessage("\nServer ended\n");
                    break;

                }
                
             }
        }
        catch(Exception ioException ){
                               running = false;
            JOptionPane.showMessageDialog(this, "Client Ternimated the Connection");
        ioException.printStackTrace();
        return;
        }
    
    
    }
       
       
      
    // get streams to send and recieve data
    private void setupStreams() throws IOException{
    
    output.flush();
    input = new DataInputStream(connection.getInputStream());
    showMessage("streams are now setup\n");
   
    }
    //during the chat conversation
    private void whileChatting() throws IOException{
        String message = "You are now connected ";
        sendMessage(message);
       // ableToType(true);
        do{
            try{
                message = (String)input.readUTF();
                showMessage("\n" + message);
            }catch(Exception e){
                                        running = false;
                showMessage("ERROR\n");
                
            }
            

        }while(running);

            

        

    
    }
    //close streams
    private void closeConnection(){
        showMessage("\nconnection closed\n");
       // ableToType(false);
        try{
            output.close();
            input.close();
            connection.close();
            
        
        }catch(Exception e){
                                   running = false;
            JOptionPane.showMessageDialog(this, "Client Ternimated the Connection");
        e.printStackTrace();
        
        }
    
    
    }
    //send message to a chat
    private void sendMessage(String message){
        try{
            output.writeUTF("SERVER - "+ message);
            output.flush();
            showMessage("\nSERVER - " + message);
        }catch(Exception e){
                                    running = false;
        chatWindow.append("\nError \n");
        }
        
    }
       
       private void showMessage(final String text){
        
                    chatWindow.append(text);    
               
    
    }
    
    

    // Variables declaration - do not modify                     
    public static javax.swing.JPanel ServerMessengerPanel;
    private javax.swing.JTextArea chatWindow;
    private javax.swing.JButton endServer;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField usertext;
    // End of variables declaration                   
}
